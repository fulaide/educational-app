generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model UserSession {
  id         String   @id @default(cuid())
  userId     String
  tokenId    String   @unique
  deviceInfo String?
  ipAddress  String?
  userAgent  String?
  lastActive DateTime @default(now())
  expiresAt  DateTime
  createdAt  DateTime @default(now())
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("user_sessions")
}

model PasswordReset {
  id        String   @id @default(cuid())
  userId    String
  token     String   @unique
  expiresAt DateTime
  used      Boolean  @default(false)
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("password_resets")
}

model EmailVerification {
  id        String   @id @default(cuid())
  userId    String
  token     String   @unique
  email     String
  expiresAt DateTime
  verified  Boolean  @default(false)
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("email_verifications")
}

model StudentQRCode {
  id        String   @id @default(cuid())
  studentId String
  token     String   @unique
  expiresAt DateTime
  used      Boolean  @default(false)
  createdBy String
  classId   String?
  createdAt DateTime @default(now())
  class     Class?   @relation(fields: [classId], references: [id])
  teacher   User     @relation("TeacherQRCodes", fields: [createdBy], references: [id], onDelete: Cascade)
  student   User     @relation("StudentQRCodes", fields: [studentId], references: [id], onDelete: Cascade)

  @@map("student_qr_codes")
}

model Organization {
  id        String           @id @default(cuid())
  name      String
  type      OrganizationType
  country   String           @db.Char(2)
  timezone  String
  settings  Json
  createdAt      DateTime           @default(now())
  updatedAt      DateTime           @updatedAt
  classes        Class[]
  rewards        Reward[]
  users          User[]
  vocabularyWords VocabularyWord[]

  @@map("organizations")
}

model User {
  id                 String               @id @default(cuid())
  role               UserRole
  email              String?              @unique
  name               String?
  uuid               String?              @unique
  emailVerified      DateTime?
  image              String?
  password           String?
  grade              Int?
  organizationId     String?
  isActive           Boolean              @default(true)
  isVerified         Boolean              @default(false)
  lastLoginAt        DateTime?
  settings           Json                 @default("{}")
  createdAt          DateTime             @default(now())
  updatedAt          DateTime             @updatedAt
  authenticators     Authenticator[]
  teacherClasses     Class[]              @relation("TeacherClasses")
  deviceInfo         DeviceInfo[]
  emailVerifications EmailVerification[]
  createdModules     LearningModule[]     @relation("CreatedBy")
  notificationTokens NotificationToken[]
  childParents       ParentChild[]        @relation("ChildRelation")
  parentChildren     ParentChild[]        @relation("ParentRelation")
  passwordResets     PasswordReset[]
  rewardRedemptions  RewardRedemption[]
  createdRewards     Reward[]             @relation("CreatedBy")
  achievements       StudentAchievement[]
  progress           StudentProgress[]
  createdQRCodes     StudentQRCode[]      @relation("TeacherQRCodes")
  studentQRCodes     StudentQRCode[]      @relation("StudentQRCodes")
  syncOperations     SyncOperation[]
  createdTasks       Task[]               @relation("CreatedBy")
  userSessions       UserSession[]
  organization         Organization?          @relation(fields: [organizationId], references: [id])
  studentClasses       Class[]                @relation("StudentClasses")
  createdVocabulary    VocabularyWord[]       @relation("VocabularyCreator")
  vocabularyProgress   VocabularyProgress[]
  vocabularySessions   VocabularySession[]
  vocabularyAttempts   VocabularyAttempt[]
  createdChallenges    VocabularyChallenge[]  @relation("ChallengeCreator")
  assignedChallenges   ChallengeAssignment[]  @relation("AssignedChallenges")
  studentAssignments   ChallengeAssignment[]  @relation("StudentAssignments")
  challengeAttempts    ChallengeAttempt[]     @relation("ChallengeAttempts")

  @@map("users")
}

model Class {
  id             String          @id @default(cuid())
  name           String
  grade          Int
  maxStudents    Int             @default(30)
  organizationId String
  teacherId      String
  isActive       Boolean         @default(true)
  avatarUrl      String?
  avatarType     AvatarType      @default(PRESET)
  settings       Json            @default("{}")
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  organization   Organization    @relation(fields: [organizationId], references: [id])
  teacher        User            @relation("TeacherClasses", fields: [teacherId], references: [id])
  qrCodes        StudentQRCode[]
  students       User[]          @relation("StudentClasses")
  challengeAssignments ChallengeAssignment[]

  @@map("classes")
}

model ParentChild {
  id        String   @id @default(cuid())
  parentId  String
  childId   String
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  child     User     @relation("ChildRelation", fields: [childId], references: [id])
  parent    User     @relation("ParentRelation", fields: [parentId], references: [id])

  @@unique([parentId, childId])
  @@map("parent_children")
}

model LearningModule {
  id                String     @id @default(cuid())
  title             String
  description       String
  difficulty        Difficulty
  grade             Int
  subject           String
  estimatedDuration Int
  prerequisites     String[]
  isPublished       Boolean    @default(false)
  createdById       String?
  createdAt         DateTime   @default(now())
  updatedAt         DateTime   @updatedAt
  createdBy         User?      @relation("CreatedBy", fields: [createdById], references: [id])
  tasks             Task[]

  @@map("learning_modules")
}

model Task {
  id            String            @id @default(cuid())
  moduleId      String
  type          TaskType
  title         String
  instructions  String
  content       Json
  correctAnswer String
  hints         String[]          @default([])
  maxAttempts   Int               @default(3)
  timeLimit     Int?
  xpReward      Int               @default(10)
  isPublished   Boolean           @default(false)
  createdById   String?
  createdAt     DateTime          @default(now())
  updatedAt     DateTime          @updatedAt
  progress      StudentProgress[]
  createdBy     User?             @relation("CreatedBy", fields: [createdById], references: [id])
  module        LearningModule    @relation(fields: [moduleId], references: [id])

  @@map("tasks")
}

model StudentProgress {
  id          String         @id @default(cuid())
  studentId   String
  taskId      String
  status      ProgressStatus @default(NOT_STARTED)
  attempts    Int            @default(0)
  score       Int?
  timeSpent   Int            @default(0)
  startedAt   DateTime       @default(now())
  completedAt DateTime?
  data        Json           @default("{}")
  student     User           @relation(fields: [studentId], references: [id])
  task        Task           @relation(fields: [taskId], references: [id])

  @@unique([studentId, taskId])
  @@map("student_progress")
}

model Achievement {
  id                  String               @id @default(cuid())
  name                String
  description         String
  type                AchievementType
  icon                String
  xpReward            Int                  @default(50)
  conditions          Json
  isActive            Boolean              @default(true)
  createdAt           DateTime             @default(now())
  studentAchievements StudentAchievement[]

  @@map("achievements")
}

model StudentAchievement {
  id            String      @id @default(cuid())
  studentId     String
  achievementId String
  unlockedAt    DateTime    @default(now())
  isNew         Boolean     @default(true)
  achievement   Achievement @relation(fields: [achievementId], references: [id])
  student       User        @relation(fields: [studentId], references: [id])

  @@unique([studentId, achievementId])
  @@map("student_achievements")
}

model Reward {
  id             String             @id @default(cuid())
  name           String
  description    String
  type           RewardType
  cost           Int
  isAvailable    Boolean            @default(true)
  createdById    String
  organizationId String?
  createdAt      DateTime           @default(now())
  redemptions    RewardRedemption[]
  createdBy      User               @relation("CreatedBy", fields: [createdById], references: [id])
  organization   Organization?      @relation(fields: [organizationId], references: [id])

  @@map("rewards")
}

model RewardRedemption {
  id          String    @id @default(cuid())
  studentId   String
  rewardId    String
  xpSpent     Int
  redeemedAt  DateTime  @default(now())
  fulfilledAt DateTime?
  notes       String?
  reward      Reward    @relation(fields: [rewardId], references: [id])
  student     User      @relation(fields: [studentId], references: [id])

  @@map("reward_redemptions")
}

model SyncOperation {
  id        String              @id @default(cuid())
  userId    String
  type      SyncOperationType
  table     String
  data      Json
  timestamp DateTime            @default(now())
  deviceId  String
  status    SyncOperationStatus @default(PENDING)
  error     String?
  user      User                @relation(fields: [userId], references: [id])

  @@map("sync_operations")
}

model DeviceInfo {
  id         String    @id @default(cuid())
  userId     String
  platform   Platform
  version    String
  deviceId   String    @unique
  appVersion String
  lastSyncAt DateTime?
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  user       User      @relation(fields: [userId], references: [id])

  @@map("device_info")
}

model NotificationToken {
  id        String   @id @default(cuid())
  userId    String
  token     String   @unique
  platform  Platform
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id])

  @@map("notification_tokens")
}

model Authenticator {
  credentialID         String  @unique @map("credential_id")
  userId               String  @map("user_id")
  providerAccountId    String  @map("provider_account_id")
  credentialPublicKey  String  @map("credential_public_key")
  counter              Int
  credentialDeviceType String  @map("credential_device_type")
  credentialBackedUp   Boolean @map("credential_backed_up")
  transports           String?
  user                 User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, credentialID])
  @@map("authenticators")
}

enum UserRole {
  STUDENT
  TEACHER
  PARENT
  ADMIN
}

enum OrganizationType {
  SCHOOL
  DISTRICT
  PRIVATE
}

enum TaskType {
  VOCABULARY
  WRITING
  READING
  LISTENING
}

enum Difficulty {
  BEGINNER
  INTERMEDIATE
  ADVANCED
}

enum ProgressStatus {
  NOT_STARTED
  IN_PROGRESS
  COMPLETED
  FAILED
}

enum AchievementType {
  STREAK
  MILESTONE
  MASTERY
  SPECIAL
}

enum RewardType {
  VIRTUAL
  PHYSICAL
  PRIVILEGE
}

enum SyncOperationType {
  CREATE
  UPDATE
  DELETE
}

enum SyncOperationStatus {
  PENDING
  SUCCESS
  FAILED
}

enum Platform {
  WEB
  IOS
  ANDROID
  DESKTOP
}

enum AvatarType {
  PRESET
  CUSTOM
}

enum VocabularyCategory {
  ANIMALS
  COLORS
  NUMBERS
  FAMILY
  OBJECTS
  FOOD
  CLOTHING
  BODY_PARTS
  WEATHER
  TIME
  PLACES
  ACTIONS
}

enum MasteryLevel {
  NOT_LEARNED
  LEARNING
  FAMILIAR
  MASTERED
}

enum ExerciseType {
  MATCHING
  MULTIPLE_CHOICE
  SPELLING
  AUDIO
  PICTURE
  SENTENCE_BUILDING
  DRAG_DROP
  FILL_BLANK
}

// Vocabulary Word Model
model VocabularyWord {
  id                   String                 @id @default(cuid())
  organizationId       String
  word                 String                 // Primary word in target language
  translation          String                 // English translation
  phonetic             String?                // IPA pronunciation
  audioUrl             String?
  imageUrl             String?
  category             VocabularyCategory
  difficulty           Difficulty
  frequency            Int                    @default(5) // 1-10 usage frequency
  tags                 String[]               @default([])
  translations         Json                   @default("{}") // Full i18n support
  examples             Json                   @default("[]") // Usage examples
  language             String                 @default("de") @db.Char(2) // ISO 639-1 code
  languageSpecificData Json                   @default("{}") // Language-specific metadata
  isActive             Boolean                @default(true)
  createdAt            DateTime               @default(now())
  updatedAt            DateTime               @updatedAt
  createdBy            String
  organization         Organization           @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  creator              User                   @relation("VocabularyCreator", fields: [createdBy], references: [id])
  progress             VocabularyProgress[]
  attempts             VocabularyAttempt[]

  @@index([organizationId])
  @@index([category])
  @@index([difficulty])
  @@index([language])
  @@map("vocabulary_words")
}

// Student Vocabulary Progress (Spaced Repetition)
model VocabularyProgress {
  id              String        @id @default(cuid())
  studentId       String
  wordId          String
  masteryLevel    MasteryLevel  @default(NOT_LEARNED)
  correctAttempts Int           @default(0)
  totalAttempts   Int           @default(0)
  lastSeen        DateTime?
  nextReview      DateTime?
  streakCount     Int           @default(0)
  interval        Int           @default(1) // days until next review
  easeFactor      Float         @default(2.5) // difficulty multiplier (1.3-2.5)
  repetitions     Int           @default(0)
  lapseCount      Int           @default(0)
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  student         User          @relation(fields: [studentId], references: [id], onDelete: Cascade)
  word            VocabularyWord @relation(fields: [wordId], references: [id], onDelete: Cascade)

  @@unique([studentId, wordId])
  @@index([studentId])
  @@index([nextReview])
  @@map("vocabulary_progress")
}

// Vocabulary Learning Session
model VocabularySession {
  id               String               @id @default(cuid())
  studentId        String
  category         VocabularyCategory?
  difficulty       Difficulty?
  wordsToReview    String[]             @default([]) // word IDs
  wordsCompleted   String[]             @default([])
  sessionType      String               @default("MIXED") // REVIEW, NEW_WORDS, MIXED
  startedAt        DateTime             @default(now())
  completedAt      DateTime?
  totalTimeSpent   Int                  @default(0) // seconds
  averageAccuracy  Float                @default(0.0)
  student          User                 @relation(fields: [studentId], references: [id], onDelete: Cascade)
  attempts         VocabularyAttempt[]

  @@index([studentId])
  @@map("vocabulary_sessions")
}

// Vocabulary Attempt within Session
model VocabularyAttempt {
  id           String            @id @default(cuid())
  sessionId    String
  wordId       String
  studentId    String
  exerciseType String            // RECOGNITION, RECALL, SPELLING, AUDIO
  isCorrect    Boolean
  responseTime Int               // milliseconds
  hintsUsed    Int               @default(0)
  attemptedAt  DateTime          @default(now())
  session      VocabularySession @relation(fields: [sessionId], references: [id], onDelete: Cascade)
  word         VocabularyWord    @relation(fields: [wordId], references: [id], onDelete: Cascade)
  student      User              @relation(fields: [studentId], references: [id], onDelete: Cascade)
  mistakes     VocabularyMistake[]

  @@index([sessionId])
  @@index([wordId])
  @@index([studentId])
  @@map("vocabulary_attempts")
}

// Vocabulary Mistake Tracking (for pattern analysis)
model VocabularyMistake {
  id             String            @id @default(cuid())
  attemptId      String
  studentId      String
  wordId         String
  mistakeType    String            // ARTICLE_ERROR, UMLAUT_ERROR, PHONETIC_CONFUSION, etc.
  correctAnswer  String
  studentAnswer  String
  severity       Float             @default(0.5) // 0-1 scale (how severe the mistake was)
  exerciseType   String            // Context of the mistake
  responseTime   Int               // milliseconds
  hintsUsed      Int               @default(0)
  languageCode   String            @default("de") @db.Char(2)
  metadata       Json              @default("{}") // Additional context (e.g., article confusion details)
  createdAt      DateTime          @default(now())
  attempt        VocabularyAttempt @relation(fields: [attemptId], references: [id], onDelete: Cascade)

  @@index([studentId])
  @@index([wordId])
  @@index([mistakeType])
  @@index([createdAt])
  @@map("vocabulary_mistakes")
}

// Vocabulary Challenge Model
model VocabularyChallenge {
  id              String                      @id @default(cuid())
  organizationId  String
  title           String
  description     String?
  exerciseType    ExerciseType
  difficulty      Difficulty
  timeLimit       Int?                        // seconds per word
  attemptsAllowed Int                         @default(3)
  enableHints     Boolean                     @default(true)
  enableExplanations Boolean                  @default(true)
  isActive        Boolean                     @default(true)
  createdBy       String
  createdAt       DateTime                    @default(now())
  updatedAt       DateTime                    @updatedAt
  creator         User                        @relation("ChallengeCreator", fields: [createdBy], references: [id])
  exercises       ChallengeExercise[]
  assignments     ChallengeAssignment[]

  @@index([organizationId])
  @@index([createdBy])
  @@map("vocabulary_challenges")
}

// Individual Exercise within a Challenge
model ChallengeExercise {
  id           String              @id @default(cuid())
  challengeId  String
  wordId       String
  order        Int                 // Order within challenge
  question     Json                // Question data (text, audio, image)
  correctAnswer String
  distractors  Json                // Array of distractors with metadata
  hints        String[]            @default([])
  explanation  String?
  createdAt    DateTime            @default(now())
  challenge    VocabularyChallenge @relation(fields: [challengeId], references: [id], onDelete: Cascade)

  @@index([challengeId])
  @@index([wordId])
  @@map("challenge_exercises")
}

// Challenge Assignment to Classes/Students
model ChallengeAssignment {
  id              String               @id @default(cuid())
  challengeId     String
  assignedBy      String
  assignedToClass String?
  assignedToStudent String?
  availableFrom   DateTime?
  availableUntil  DateTime?
  isActive        Boolean              @default(true)
  createdAt       DateTime             @default(now())
  updatedAt       DateTime             @updatedAt
  challenge       VocabularyChallenge  @relation(fields: [challengeId], references: [id], onDelete: Cascade)
  assignedByUser  User                 @relation("AssignedChallenges", fields: [assignedBy], references: [id])
  class           Class?               @relation(fields: [assignedToClass], references: [id])
  student         User?                @relation("StudentAssignments", fields: [assignedToStudent], references: [id])
  attempts        ChallengeAttempt[]

  @@index([challengeId])
  @@index([assignedToClass])
  @@index([assignedToStudent])
  @@map("challenge_assignments")
}

// Student Challenge Attempt
model ChallengeAttempt {
  id           String              @id @default(cuid())
  assignmentId String
  studentId    String
  startedAt    DateTime            @default(now())
  completedAt  DateTime?
  score        Int?
  totalPoints  Int
  timeSpent    Int                 @default(0) // seconds
  responses    Json                // Array of exercise responses
  isComplete   Boolean             @default(false)
  assignment   ChallengeAssignment @relation(fields: [assignmentId], references: [id], onDelete: Cascade)
  student      User                @relation("ChallengeAttempts", fields: [studentId], references: [id])

  @@index([assignmentId])
  @@index([studentId])
  @@map("challenge_attempts")
}
